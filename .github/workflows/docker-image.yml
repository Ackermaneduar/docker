name: Build, Test, Metrics and Push

on:
  push:
    branches:
      - main
  pull_request:

env:
  IMAGE_NAME: ${{ vars.DOCKER_USERNAME }}/my-image
  PYTHON_VERSION: '3.9'

jobs:
  quality-checks:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pylint pytest pytest-cov

      - name: Run linter
        run: flake8 src/ --count --show-source --statistics

      - name: Run static analysis
        run: pylint src/ --exit-zero

  build-test:
    needs: quality-checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build test image
        uses: docker/build-push-action@v6
        with:
          target: test
          tags: ${{ steps.meta.outputs.tags }}-test
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run unit tests
        run: |
          docker run --rm ${{ steps.meta.outputs.tags }}-test \
            pytest --cov=./src --cov-report=xml tests/
          
      - name: Upload coverage
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: coverage.xml

      - name: Run integration tests
        run: |
          docker compose -f docker-compose.test.yml up -d
          ./run_integration_tests.sh
          docker compose -f docker-compose.test.yml down

  analyze-metrics:
    needs: build-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download test image
        run: docker pull ${{ env.IMAGE_NAME }}:test || true

      - name: Image size metrics
        run: |
          echo "Image size: $(docker images --format "{{.Size}}" ${{ env.IMAGE_NAME }}:test)"
          docker history ${{ env.IMAGE_NAME }}:test

      - name: Security scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.IMAGE_NAME }}:test
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload security report
        uses: actions/upload-artifact@v3
        with:
          name: trivy-report
          path: trivy-results.sarif

      - name: Analyze image layers
        uses: wagoodman/dive-action@v1
        with:
          image: ${{ env.IMAGE_NAME }}:test
          ci: true
          failThreshold: '0.8'

  deploy:
    needs: [quality-checks, build-test, analyze-metrics]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          provenance: true
          sbom: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Slack notification
        uses: slackapi/slack-github-action@v1
        if: always()
        with:
          channel-id: 'deployments'
          slack-message: 'Docker image ${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }} deployed'
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
