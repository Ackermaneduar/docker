name: Build, Test, Analyze and Push Docker Image

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  test-build-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Paso 1: Extraer metadatos de la imagen
      - name: Extract Docker image metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ vars.DOCKER_USERNAME }}/my-image

      # Paso 2: Configurar Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Paso 3: Construir imagen para pruebas
      - name: Build for testing
        id: build-test
        uses: docker/build-push-action@v6
        with:
          tags: ${{ steps.meta.outputs.tags }}-test
          target: test-stage  # Asume que tienes multi-stage build
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Paso 4: Ejecutar pruebas unitarias
      - name: Run unit tests
        run: |
          docker run --rm ${{ steps.meta.outputs.tags }}-test pytest --cov=./src tests/
          # Guardar reporte de cobertura
          docker create --name test-container ${{ steps.meta.outputs.tags }}-test
          docker cp test-container:/app/coverage.xml ./coverage.xml
          docker rm test-container

      # Paso 5: Analizar vulnerabilidades
      - name: Scan for vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.meta.outputs.tags }}-test
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'
          output: trivy-results.txt

      # Paso 6: Analizar eficiencia de la imagen
      - name: Analyze image efficiency
        run: |
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            wagoodman/dive ${{ steps.meta.outputs.tags }}-test --ci
          # O usar: docker history ${{ steps.meta.outputs.tags }}-test

      # Paso 7: Login a Docker Hub (solo en main)
      - name: Log in to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Paso 8: Construir y push de la imagen final
      - name: Build and push production image
        if: github.event_name != 'pull_request'
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          annotations: ${{ steps.meta.outputs.annotations }}
          provenance: true
          sbom: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Paso 9: Subir m√©tricas y reportes
      - name: Upload test coverage
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: coverage.xml

      - name: Upload security report
        uses: actions/upload-artifact@v3
        with:
          name: trivy-report
          path: trivy-results.txt
